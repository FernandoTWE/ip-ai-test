<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href="/ip-ai-test/favicon.svg" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="generator" content={Astro.generator} />
  <title>Resultados de Análisis de IP</title>
  <style>
    .card {
      @apply bg-white text-black p-4 rounded-lg shadow-md mb-4;
    }
    .card-header {
      @apply font-semibold text-lg mb-2;
    }
    .risk-score {
      @apply text-center text-white text-lg font-bold p-4 rounded-full;
    }
    .risk-score-high {
      @apply bg-red-500;
    }
    .risk-score-medium {
      @apply bg-yellow-500;
    }
    .risk-score-low {
      @apply bg-green-500;
    }
    details summary {
      @apply cursor-pointer font-semibold;
    }
    details div, details ul {
      @apply mt-2 pl-4;
    }
    .button-container {
      display: flex;
      justify-content: center;
      margin-top: 2rem;
    }
    .button-container a {
      @apply inline-block py-5 px-10 text-xl leading-6 text-white font-medium tracking-tighter bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 focus:ring-2 focus:ring-blue-600 focus:ring-opacity-50 rounded-xl shadow-xl transition transform hover:-translate-y-1 cursor-pointer;
    }
  </style>
</head>
<body class="bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 text-white">
  <section class="min-h-screen p-4 flex items-center justify-center">
    <div class="container mx-auto max-w-4xl">
      <!-- Puntuación Global de Riesgo y Datos Generales -->
      <div class="flex flex-wrap justify-between mb-4">
        <div class="card w-full md:w-1/4">
          <div class="card-header">Puntuación Global de Riesgo</div>
          <div id="riskScore" class="risk-score">/10</div>
        </div>

        <div class="card w-full md:w-2/3">
          <div class="card-header">Datos Generales</div>
          <p id="generalInfo"></p>
        </div>
      </div>

      <!-- Resumen de Conexión -->
      <div class="card mb-4">
        <div class="card-header">Resumen de Conexión</div>
        <div id="connectionSummary"></div>
      </div>

      <!-- Puertos Abiertos y Vulnerabilidades -->
      <div class="card" id="portsAndVulnerabilities" style="display: none;">
        <div class="card-header">Puertos Abiertos y Vulnerabilidades</div>
        <div id="openPorts"></div>
      </div>

      <!-- Botón Volver a Inicio -->
      <div class="button-container">
        <a href="/ip-ai-test/">Volver a Inicio</a>
      </div>
    </div>
  </section>

  <script>
    const consultaId = new URLSearchParams(window.location.search).get('consulta_id');

    const defaultData = {
      "consulta_id": "11111",
      "generalInfo": {
        "city": "Mountain View",
        "state": "California",
        "country": "Estados Unidos",
        "latitude": 37.3860,
        "longitude": -122.0838,
        "ispName": "Google LLC",
        "ipNumber": "8.8.8.8"
      },
      "openPorts": [
        {
          "portNameAndType": "Puerto 53 (UDP)",
          "applicationInfo": "<p>El puerto 53 (UDP) se utiliza para el servicio de DNS (Domain Name System), el cual se encarga de traducir los nombres de dominio a direcciones IP y viceversa.</p>"
        },
        {
          "portNameAndType": "Puerto 443 (TCP)",
          "applicationInfo": "<p>El puerto 443 (TCP) se utiliza para el servicio de HTTPS (Hypertext Transfer Protocol Secure), el cual es una versión segura del protocolo HTTP utilizado para la transferencia segura de datos en internet.</p>"
        }
      ],
      "vulnerabilities": [
        {
          "cveId": "CVE-2015-7547",
          "cveDescription": "<p>CVE-2015-7547 es una vulnerabilidad de desbordamiento de búfer en glibc que puede permitir a un atacante ejecutar código malicioso o realizar ataques de denegación de servicio.</p>",
          "cveRecommendations": "<p>Para mitigar esta vulnerabilidad, se recomienda actualizar la versión de glibc a una que contenga la corrección del CVE-2015-7547. También se puede considerar implementar medidas adicionales de seguridad en el sistema.</p>",
          "cveRiskLevel": "Alto",
          "associatedPorts": "[53, 443]"
        },
        {
          "cveId": "CVE-2017-12629",
          "cveDescription": "<p>CVE-2017-12629 es una vulnerabilidad en el protocolo DNS que podría permitir a un atacante realizar ataques de envenenamiento de caché DNS o suplantación de identidad.</p>",
          "cveRecommendations": "<p>Para mitigar esta vulnerabilidad, se recomienda implementar medidas de seguridad adicionales en el servidor DNS, como la validación de respuestas DNS y la implementación de DNSSEC (Domain Name System Security Extensions).</p>",
          "cveRiskLevel": "Medio",
          "associatedPorts": "[53]"
        }
      ],
      "connectionSummary": "<p>La dirección IP 8.8.8.8 se encuentra ubicada en Mountain View, California, Estados Unidos. Pertenece al proveedor de servicios de internet Google LLC. Tiene abiertos los puertos 53 (UDP) y 443 (TCP), utilizados para servicios de DNS y HTTPS respectivamente. Se han detectado las vulnerabilidades CVE-2015-7547 y CVE-2017-12629, las cuales presentan un riesgo alto y medio respectivamente. Se recomienda aplicar las actualizaciones correspondientes y reforzar las medidas de seguridad en el servidor DNS.</p>",
      "globalRiskScore": "7"
    };

    const fetchAnalysisResult = async (consultaId) => {
      try {
        const response = await fetch(`https://e863b.twidget.io/analisisip/${consultaId}`);
        if (!response.ok) throw new Error('Network response was not ok');
        const data = await response.json();
        console.log('Fetched data:', data);
        return data;
      } catch (error) {
        console.error('Fetch error:', error);
        return defaultData;
      }
    };

    const renderData = (data) => {
      // Puntuación Global de Riesgo
      const riskScoreElement = document.getElementById('riskScore');
      riskScoreElement.textContent = `${data.globalRiskScore}/10`;
      riskScoreElement.className = `risk-score ${data.globalRiskScore > 7 ? 'risk-score-high' : data.globalRiskScore >= 3 ? 'risk-score-medium' : 'risk-score-low'}`;

      // Datos Generales
      const generalInfoElement = document.getElementById('generalInfo');
      generalInfoElement.innerHTML = `
        Tu IP se encuentra en <strong>${data.generalInfo.city}, ${data.generalInfo.state}, ${data.generalInfo.country}</strong><br>
        El proveedor de tu conexión a internet es ${data.generalInfo.ispName}<br>
        Tu IP es ${data.generalInfo.ipNumber}
      `;

      // Resumen de Conexión
      const connectionSummaryElement = document.getElementById('connectionSummary');
      connectionSummaryElement.innerHTML = data.connectionSummary;

      // Puertos Abiertos y Vulnerabilidades
      if (data.openPorts.length > 0) {
        const portsAndVulnerabilitiesElement = document.getElementById('portsAndVulnerabilities');
        portsAndVulnerabilitiesElement.style.display = 'block';
        const openPortsElement = document.getElementById('openPorts');
        openPortsElement.innerHTML = data.openPorts.map(port => `
          <details class="mb-4 bg-white text-black p-4 rounded-lg shadow-md">
            <summary class="cursor-pointer font-semibold p-2 bg-gray-200 rounded-md transition-all duration-300 ease-in-out">${port.portNameAndType}</summary>
            <div>${port.applicationInfo}</div>
            <ul class="mt-2 pl-4">
              ${data.vulnerabilities
                .filter(vul => vul.associatedPorts.includes(parseInt(port.portNameAndType.match(/\d+/)[0])))
                .map(vul => `
                  <li class="mt-2">
                    <h4 class="font-semibold">${vul.cveId}</h4>
                    <div>${vul.cveDescription}</div>
                    <div>${vul.cveRecommendations}</div>
                    <p><strong>Nivel de Riesgo:</strong> ${vul.cveRiskLevel}</p>
                  </li>
                `).join('')}
            </ul>
          </details>
        `).join('');
      }
    };

    let resultData;

    if (consultaId) {
      fetchAnalysisResult(consultaId).then(data => {
        resultData = data;
        renderData(resultData);
      });
    } else {
      resultData = defaultData;
      renderData(resultData);
    }
  </script>
</body>
</html>

